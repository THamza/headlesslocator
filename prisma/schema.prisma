// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// PROD
// datasource db {
//   provider  = "postgresql"
//   url       = env("DATABASE_URL")
//   directUrl = env("DIRECT_URL")
// }

generator client {
  provider = "prisma-client-js"
}

model Profile {
  id         String   @id @default(uuid())
  clerkId    String   @unique
  email      String   @unique
  firstName  String?
  lastName   String?
  telegram   String?
  discord    String?
  interests  String?
  address    String?
  zipCode    String?
  country    String?
  city       String?
  state      String?
  latitude   Float?
  longitude  Float?
  notify     Boolean  @default(false)
  isAdmin    Boolean  @default(false)
  notificationRadius Float?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  UserCityGroups UserCityGroup[]
}

model CityGroup {
  id        String   @id @default(uuid())
  city      String   @unique
  groupId   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  UserCityGroups UserCityGroup[]
}

model UserCityGroup {
  id         String   @id @default(uuid())
  userId     String
  cityGroupId String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  Profile    Profile  @relation(fields: [userId], references: [id])
  CityGroup  CityGroup @relation(fields: [cityGroupId], references: [id])

  @@unique([userId, cityGroupId])
}

model RegistrationRequest {
  id         String   @id @default(uuid())
  email      String
  message    String?
  notified  Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}